" Tabs/spaces
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" no fold by default
set nofoldenable

" ,a to search
map <leader>a :Ack 

" ,<space> clears search result highlights etc
map <leader><space> :let @/=''<cr>

" add beams etc to useless file list
set wildignore+=*.beam,*.dump,*~,*.o,.git,*.png,*.jpg,*.gif

set encoding=utf-8

" tripple escape closes buffer
map <esc><esc><esc> :bd<cr>
imap <esc><esc><esc> :bd<cr>

" Fuck you, help key.
inoremap <F1> <ESC>:set invfullscreen<CR>a
nnoremap <F1> :set invfullscreen<CR>
vnoremap <F1> :set invfullscreen<CR>

" Easier buffer navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
map <leader>w <C-w>v<C-w>l

" Use the same symbols as TextMate for tabstops and EOLs
set list
set listchars=tab:▸\ ,eol:¬

" Color scheme (terminal)
syntax on
set background=dark
colorscheme molokai
" colorscheme delek

" NERD Tree
map <F2> :NERDTreeToggle<cr>
let NERDTreeIgnore=['\.beam$', '\.dump$', '\~$', '^\.']

set colorcolumn=80

let g:erl_author="Richard Jones <rj@metabrew.com>"
let g:erl_company="IRCCloud Ltd."
let g:erl_replace_buffer=1
let g:erlangManPath="/usr/local/Cellar/erlang/HEAD/share/man"
"let g:erl_tpl_dir="/Users/rj/.vim/bundle/erlang-skel/plugin/templates/"


if has('gui_running')
    set guifont=Menlo:h14
    colorscheme molokai
    set background=dark
    set go-=T
    set go-=l
    set go-=L
    set go-=r
    set go-=R
    if has("gui_macvim")
        " Full screen on macvim should fully maxed out
        set fuopt=maxvert,maxhorz
        "macmenu &File.New\ Tab key=<nop>
        "map <leader>t <Plug>PeepOpen
    else
        set guifont=DejaVu\ Sans\ Mono\ 13
    end
    "let g:sparkupExecuteMapping = '<D-e>'
    "highlight SpellBad term=underline gui=undercurl guisp=Orange
endif

" Use omni completion if module_name:something, for erlang:
" (by default, supertab uses . :: ->, but not a single :
function SuperErlangContext()
    let exclusions = exists('g:SuperTabContextTextFileTypeExclusions') ?
        \ g:SuperTabContextTextFileTypeExclusions : []
    if index(exclusions, &ft) == -1
        let curline = getline('.')
        let cnum = col('.')
        let synname = synIDattr(synID(line('.'), cnum - 1, 1), 'name')
        if curline =~ '.*\(\w\|[\])]\)\(:\)\w*\%' . cnum . 'c' && synname !~ '\(String\|Comment\)'
            return "\<c-x>\<c-o>"
        endif
    endif
    " no return will result in the evaluation of the next
    " configured context
endfunction
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabCompletionContexts = ['SuperErlangContext', 's:ContextText', 's:ContextDiscover']

" no man page erlang completion:
let g:erlangCompletionDisplayDoc = 0


